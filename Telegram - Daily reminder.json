{
  "createdAt": "2025-08-01T17:59:30.990Z",
  "updatedAt": "2025-08-02T17:37:10.000Z",
  "id": "fw99iWLFvEcYF6i6",
  "name": "Telegram - Daily reminder",
  "active": true,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 7
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -752,
        528
      ],
      "id": "80c10556-de22-4b7e-8801-637047270e0c",
      "name": "Schedule Trigger1"
    },
    {
      "parameters": {
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "family09687667346947656727@group.calendar.google.com",
          "mode": "list",
          "cachedResultName": "היומן המשפחתי"
        },
        "timeMax": "={{ $now.plus({ day:4}) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        -528,
        528
      ],
      "id": "7eaefced-2106-4ad0-9f9d-22b94a59b0d9",
      "name": "Get many events",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "rCCaAfdsLkxUeIZ5",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "1be61692-de47-4994-ae29-83eac0e79b5b",
              "name": "כותרת",
              "value": "={{ $json.summary }}",
              "type": "string"
            },
            {
              "id": "f9b8eea8-9b81-44db-aa9c-aac6ac0147d4",
              "name": "התחלה",
              "value": "={{ $json.start }}",
              "type": "string"
            },
            {
              "id": "6713965b-2359-42c7-aa27-0175e24c304b",
              "name": "סיום",
              "value": "={{ $json.end }}",
              "type": "string"
            },
            {
              "id": "964d3cdb-9a26-4997-8e16-ea59067cd0a2",
              "name": "יוצר",
              "value": "={{ $json.creator }}",
              "type": "string"
            },
            {
              "id": "d9983d3e-85f9-4e7c-9f8d-9800348df55f",
              "name": "קישור",
              "value": "={{ $json.htmlLink }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -304,
        528
      ],
      "id": "8926b436-5532-4be8-b122-df4ef1f1ff79",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "jsCode": "function parseDate(input) {\n  try {\n    return JSON.parse(input);\n  } catch {\n    return null;\n  }\n}\n\nfunction formatDate(obj) {\n  if (!obj) return \"\";\n\n  if (obj.dateTime) {\n    const dateObj = new Date(obj.dateTime);\n\n    const optionsDate = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\n    const optionsTime = { hour: '2-digit', minute: '2-digit', hour12: false };\n\n    const date = new Intl.DateTimeFormat('he-IL', optionsDate).format(dateObj);\n    const time = new Intl.DateTimeFormat('he-IL', optionsTime).format(dateObj);\n\n    return `${date} בשעה ${time}`;\n  }\n\n  if (obj.date) {\n    const dateObj = new Date(obj.date);\n\n    const optionsDate = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\n    return new Intl.DateTimeFormat('he-IL', optionsDate).format(dateObj);\n  }\n\n  return \"\";\n}\n\nreturn $input.all().map(item => {\n  const startObj = parseDate(item.json[\"התחלה\"]);\n  const endObj = parseDate(item.json[\"סיום\"]);\n\n  return {\n    json: {\n      כותרת: item.json[\"כותרת\"],\n\n      // ✅ נשמור גם את המידע המקורי\n      התחלהRaw: startObj,\n      סיוםRaw: endObj,\n\n      // ✅ וגם את הטקסט המעוצב לקריאה\n      התחלה: formatDate(startObj),\n      סיום: formatDate(endObj),\n\n      יוצר: item.json[\"יוצר\"],\n      קישור: item.json[\"קישור\"]\n    }\n  };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -80,
        528
      ],
      "id": "b38d24e9-c2bf-4048-9ad9-86af8cc57e96",
      "name": "Fix Timezone"
    },
    {
      "parameters": {
        "jsCode": "function escapeMarkdownV2(text) {\n  if (!text) return \"\";\n  return text.replace(/([_*\\[\\]()~`>#+\\-=|{}.!\\\\])/g, '\\\\$1');\n}\n\nfunction getDateFromRaw(raw) {\n  if (!raw) return null;\n  const value = raw.dateTime || raw.date;\n  return value ? new Date(value) : null;\n}\n\nfunction getDateKey(raw) {\n  const dateObj = getDateFromRaw(raw);\n  return dateObj ? dateObj.toISOString().split(\"T\")[0] : null;\n}\n\nfunction formatDayLabel(dateKey) {\n  if (!dateKey) return \"\";\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n\n  const tomorrow = new Date(today);\n  tomorrow.setDate(tomorrow.getDate() + 1);\n\n  const dateObj = new Date(dateKey);\n  dateObj.setHours(0, 0, 0, 0);\n\n  if (dateObj.getTime() === today.getTime()) return \"היום\";\n  if (dateObj.getTime() === tomorrow.getTime()) return \"מחר\";\n\n  const options = { weekday: \"long\", day: \"numeric\", month: \"long\", year: \"numeric\" };\n  return new Intl.DateTimeFormat(\"he-IL\", options).format(dateObj);\n}\n\nfunction formatTime(raw) {\n  if (!raw || !raw.dateTime) return null;\n  const dateObj = new Date(raw.dateTime);\n  const options = { hour: \"2-digit\", minute: \"2-digit\", hour12: false };\n  return new Intl.DateTimeFormat(\"he-IL\", options).format(dateObj);\n}\n\nfunction createLink(name, url) {\n  const safeName = escapeMarkdownV2(name);\n  const safeUrl = url.replace(/\\)/g, \"\\\\)\").replace(/\\(/g, \"\\\\(\");\n  return `[${safeName}](${safeUrl})`;\n}\n\nconst events = $input.all().map(item => item.json);\n\n// מיון לפי תאריך התחלה\nevents.sort((a, b) => {\n  const da = getDateFromRaw(a.התחלהRaw) || 0;\n  const db = getDateFromRaw(b.התחלהRaw) || 0;\n  return da - db;\n});\n\n// קיבוץ לפי יום התחלה\nconst grouped = {};\nevents.forEach(ev => {\n  const key = getDateKey(ev.התחלהRaw);\n  if (!key) return;\n  if (!grouped[key]) grouped[key] = [];\n  grouped[key].push(ev);\n});\n\n// כותרת ההודעה עם התאריך של היום\nconst todayFormatted = new Intl.DateTimeFormat(\"he-IL\", {\n  weekday: \"long\",\n  day: \"numeric\",\n  month: \"long\",\n  year: \"numeric\",\n}).format(new Date());\n\nlet message = `📅 היום *${escapeMarkdownV2(todayFormatted)}*\\nאלו האירועים הקרובים לפי היומן:\\n\\n`;\n\nObject.keys(grouped).forEach(dateKey => {\n  message += `*${escapeMarkdownV2(formatDayLabel(dateKey))}*\\n`;\n\n  grouped[dateKey].forEach((ev, index) => {\n    const startTime = formatTime(ev.התחלהRaw);\n    const endTime = formatTime(ev.סיוםRaw);\n    const sameDay = getDateKey(ev.התחלהRaw) === getDateKey(ev.סיוםRaw);\n\n    message += `${index + 1}\\\\. *${escapeMarkdownV2(ev.כותרת)}*\\n`;\n\n    if (sameDay && startTime && endTime) {\n      message += `   🕒 שעה: ${escapeMarkdownV2(startTime)} \\\\- ${escapeMarkdownV2(endTime)}\\n`;\n    } else {\n      message += `   📆 התחלה: ${escapeMarkdownV2(ev.התחלה)}\\n`;\n      message += `   ⏳ סיום: ${escapeMarkdownV2(ev.סיום)}\\n`;\n    }\n\n    if (ev.קישור) {\n      message += `   🔗 קישור: ${createLink(\"לצפייה ביומן\", ev.קישור)}\\n`;\n    }\n\n    message += \"\\n\";\n  });\n\n  message += \"\\n\";\n});\n\nreturn [{ json: { message } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        144,
        528
      ],
      "id": "469d5103-0980-418d-b4fd-1964b3c2ce7f",
      "name": "parese msg"
    },
    {
      "parameters": {
        "chatId": "={{530815619}}",
        "text": "={{ $json.message }}\n{{ $json.weather }}",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "MarkdownV2"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        368,
        528
      ],
      "id": "cf090a23-abed-41ed-8233-21fc3a8694de",
      "name": "Send a msg",
      "webhookId": "c7f74669-a664-4c32-8579-efa03d86ff4e",
      "credentials": {
        "telegramApi": {
          "id": "HpzirYeF6mhKsgbi",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "operation": "5DayForecast",
        "locationSelection": "cityId",
        "cityId": 293396,
        "language": "he"
      },
      "type": "n8n-nodes-base.openWeatherMap",
      "typeVersion": 1,
      "position": [
        -528,
        720
      ],
      "id": "db0e293e-5c62-43df-9197-f120e47cd10f",
      "name": "OpenWeatherMap",
      "credentials": {
        "openWeatherMapApi": {
          "id": "udoUwG3Wswn5rGS4",
          "name": "OpenWeatherMap account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{530815619}}",
        "text": "={{ $json.weather }}\n",
        "additionalFields": {
          "parse_mode": "MarkdownV2"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -80,
        720
      ],
      "id": "a7e299de-c300-4a86-97f3-ecfa72cef8d6",
      "name": "Send a text message1",
      "webhookId": "0a6382a0-99b5-431c-a3b9-01f3ceb18b2d",
      "credentials": {
        "telegramApi": {
          "id": "HpzirYeF6mhKsgbi",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "function escapeMarkdownV2(text) {\n  return text.replace(/([_*\\[\\]()~`>#+\\-=|{}.!\\\\])/g, '\\\\$1');\n}\n\nfunction calculateHeatIndex(tempC, humidity) {\n  const T = tempC;\n  const RH = humidity;\n  return -8.784695 +\n         1.61139411*T +\n         2.338549*RH +\n         -0.14611605*T*RH +\n         -0.012308094*T*T +\n         -0.016424828*RH*RH +\n         0.002211732*T*T*RH +\n         0.00072546*T*RH*RH +\n         -0.000003582*T*T*RH*RH;\n}\n\nfunction getHeatStressLevel(hi) {\n  if (hi < 27) return \"קל\";\n  if (hi < 32) return \"בינוני\";\n  if (hi < 41) return \"כבד\";\n  return \"קיצוני\";\n}\n\nconst weatherData = items[0].json;\n\n// קיבוץ לפי יום\nconst dailyData = {};\nweatherData.list.forEach(entry => {\n  const date = new Date(entry.dt_txt);\n  const day = date.toISOString().split('T')[0];\n\n  if (!dailyData[day]) {\n    dailyData[day] = { temps: [], humidity: [], descriptions: [] };\n  }\n\n  dailyData[day].temps.push(entry.main.temp);\n  dailyData[day].humidity.push(entry.main.humidity);\n  dailyData[day].descriptions.push(entry.weather[0].description);\n});\n\n// לוקחים רק היום ומחר\nconst days = Object.keys(dailyData).sort().slice(0, 2);\n\nlet weather = `*${escapeMarkdownV2(\"תחזית מזג האוויר ל־\" + weatherData.city.name)}*\\n\\n`;\n\ndays.forEach((day, index) => {\n  const data = dailyData[day];\n  const avgTemp = (data.temps.reduce((a,b)=>a+b,0)/data.temps.length).toFixed(1);\n  const maxTemp = Math.max(...data.temps).toFixed(1);\n  const avgHumidity = (data.humidity.reduce((a,b)=>a+b,0)/data.humidity.length).toFixed(1);\n\n  const desc = data.descriptions.sort((a,b)=>\n    data.descriptions.filter(v=>v===a).length - data.descriptions.filter(v=>v===b).length\n  ).pop();\n\n  const hi = calculateHeatIndex(parseFloat(avgTemp), parseFloat(avgHumidity)).toFixed(1);\n  const stress = getHeatStressLevel(hi);\n\n  const title = index === 0 ? \"מזג האוויר להיום\" : \"מזג האוויר למחר\";\n\n  weather += `*${escapeMarkdownV2(title)}*\\n`;\n  weather += `מזג האוויר: ${escapeMarkdownV2(desc)}\\n`;\n  weather += `עומס חום: *${escapeMarkdownV2(stress)}*\\n`;\n  weather += `טמפרטורה ממוצעת: *${escapeMarkdownV2(avgTemp)}\\\\°C*\\n`;\n  weather += `מקסימום: ${escapeMarkdownV2(maxTemp)}\\\\°C\\n\\n`;\n});\n\nreturn [{ json: { weather } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -304,
        720
      ],
      "id": "e8d7e5dd-0221-4d07-be0e-30d30fd58595",
      "name": "edit Weather msg1"
    },
    {
      "parameters": {
        "chatId": "={{530815619}}",
        "text": "=בוקר טוב \nאלו העדכונים להיום \n",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -528,
        336
      ],
      "id": "ee77acea-4bde-4887-8a9e-2301f966b66d",
      "name": "Send a text message2",
      "webhookId": "0a6382a0-99b5-431c-a3b9-01f3ceb18b2d",
      "credentials": {
        "telegramApi": {
          "id": "HpzirYeF6mhKsgbi",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "download": false,
        "additionalFields": {}
      },
      "name": "Get the astronomy picture of the day",
      "type": "n8n-nodes-base.nasa",
      "position": [
        -528,
        1056
      ],
      "typeVersion": 1,
      "id": "ed3a1863-9077-4385-a964-1ab4e3803862",
      "credentials": {
        "nasaApi": {
          "id": "3FZUZ0nR0mRWC0wt",
          "name": "NASA account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "operation": "sendPhoto",
        "chatId": "530815619",
        "file": "={{$node[\"Get the astronomy picture of the day\"].json[\"url\"]}}\n",
        "additionalFields": {
          "caption": "=התמונה היומית :\n{{ $json.output }}"
        }
      },
      "name": "Send a photo message",
      "type": "n8n-nodes-base.telegram",
      "position": [
        96,
        1056
      ],
      "typeVersion": 1,
      "id": "fc160c9b-f0c5-47e0-8b19-332a2d4bed2c",
      "webhookId": "12f61ded-03fe-4321-abc8-9b7f6839e38b",
      "credentials": {
        "telegramApi": {
          "id": "HpzirYeF6mhKsgbi",
          "name": "Telegram account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=תתרגם לי את התוכן הבא, הוא מכיל כותרת ותיאור של תמונה מנאס'א\nהפלט שלך צריך להיות רק התרגום של המלל בשפה חופשית \nשום דבר מעבר לזה \nהמלל צריך להיות בפורמט escapeMarkdownV2 שתואם לטלגרם\n\nבמידה והתוכן מעל 4-5 שורות תנסה לצמצם ולתמצת\n\n{{ $json.title }}\n\n{{ $json.explanation }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        -304,
        1056
      ],
      "id": "b30e9f91-3948-4966-942d-6fdda266ced9",
      "name": "AI Agent1",
      "disabled": true
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash-lite",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -208,
        1280
      ],
      "id": "18eab5b5-963e-45c2-97d5-78f41b1cf264",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "3e4I4idKS4czltyG",
          "name": "Google Gemini(PaLM) Api account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 10
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -752,
        1056
      ],
      "id": "42d41f76-19b2-42ff-a2b6-ddcc87dae651",
      "name": "Schedule Trigger2",
      "disabled": true
    }
  ],
  "connections": {
    "Schedule Trigger1": {
      "main": [
        [
          {
            "node": "OpenWeatherMap",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get many events",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send a text message2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get many events": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Fix Timezone",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fix Timezone": {
      "main": [
        [
          {
            "node": "parese msg",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "parese msg": {
      "main": [
        [
          {
            "node": "Send a msg",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenWeatherMap": {
      "main": [
        [
          {
            "node": "edit Weather msg1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send a msg": {
      "main": [
        []
      ]
    },
    "edit Weather msg1": {
      "main": [
        [
          {
            "node": "Send a text message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get the astronomy picture of the day": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "Send a photo message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger2": {
      "main": [
        [
          {
            "node": "Get the astronomy picture of the day",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "timezone": "Asia/Jerusalem",
    "callerPolicy": "workflowsFromSameOwner"
  },
  "staticData": {
    "node:Schedule Trigger1": {
      "recurrenceRules": []
    },
    "node:Schedule Trigger2": {
      "recurrenceRules": []
    }
  },
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "66abf4b4-b42f-4b74-9939-9f945024172b",
  "triggerCount": 1,
  "tags": []
}