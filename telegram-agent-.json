{
  "createdAt": "2025-07-15T11:52:42.906Z",
  "updatedAt": "2025-07-15T12:13:36.000Z",
  "id": "EhLmeL17IWgTCjhE",
  "name": "telegram agent",
  "active": true,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "sessionKey": "=chat_with_{{ $('Listen for incoming events').first().json.message.chat.id }}",
        "contextWindowLength": 10
      },
      "id": "ad5d0566-7453-4f20-99fb-e3d83b8a98a5",
      "name": "Window Buffer Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "position": [
        448,
        224
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "chatId": "={{ $('Listen for incoming events').first().json.message.from.id }}",
        "text": "={{ $json.output }}",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "id": "18006094-78f0-4aa7-b78a-97bf36ab9967",
      "name": "Telegram",
      "type": "n8n-nodes-base.telegram",
      "position": [
        784,
        0
      ],
      "typeVersion": 1.1,
      "webhookId": "a9a98a13-79bc-4743-bc41-a24ec82e3101",
      "credentials": {
        "telegramApi": {
          "id": "bFawm4XmBygLSfwR",
          "name": "Telegram account"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "chatId": "={{ $('Listen for incoming events').first().json.message.from.id }}",
        "text": "={{ $('AI Agent').item.json.output.replace(/&/g, \"&amp;\").replace(/>/g, \"&gt;\").replace(/</g, \"&lt;\").replace(/\"/g, \"&quot;\") }}",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "id": "9c6c8163-cabc-4f1c-b9fb-6325ff04b37b",
      "name": "Correct errors",
      "type": "n8n-nodes-base.telegram",
      "position": [
        1008,
        0
      ],
      "typeVersion": 1.1,
      "webhookId": "f900177d-8932-43df-ba16-4f8d03ef4220",
      "credentials": {
        "telegramApi": {
          "id": "bFawm4XmBygLSfwR",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "id": "2c7802c3-d94e-4102-ae27-417a4b9b3230",
      "name": "Listen for incoming events",
      "type": "n8n-nodes-base.telegramTrigger",
      "position": [
        -128,
        0
      ],
      "webhookId": "322dce18-f93e-4f86-b9b1-3305519b7834",
      "typeVersion": 1,
      "credentials": {
        "telegramApi": {
          "id": "bFawm4XmBygLSfwR",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "text": "={{ $json.message.text }}",
        "options": {
          "systemMessage": "=You are a helpful AI assistant. You are chatting with the user named `{{ $json.message.from.first_name }}`. Today is {{ DateTime.fromISO($now).toLocaleString(DateTime.DATETIME_FULL) }}\n\nIf the user asks for news, you can use a news tool to give him news.\n\nIf the user asks for the weather, you can use an OpenWeatherMap tool.\n\nFrom time to time call a user by name (if the user name is provided). In your reply, always send a message in Telegram-supported HTML format. Here are the formatting instructions:\n1. The following tags are currently supported:\n<b>bold</b>, <strong>bold</strong>\n<i>italic</i>, <em>italic</em>\n<u>underline</u>, <ins>underline</ins>\n<s>strikethrough</s>, <strike>strikethrough</strike>, <del>strikethrough</del>\n<span class=\"tg-spoiler\">spoiler</span>, <tg-spoiler>spoiler</tg-spoiler>\n<b>bold <i>italic bold <s>italic bold strikethrough <span class=\"tg-spoiler\">italic bold strikethrough spoiler</span></s> <u>underline italic bold</u></i> bold</b>\n<a href=\"http://www.example.com/\">inline URL</a>\n<code>inline fixed-width code</code>\n<pre>pre-formatted fixed-width code block</pre>\n2. Any code that you send should be wrapped in these tags: <pre><code class=\"language-python\">pre-formatted fixed-width code block written in the Python programming language</code></pre>\nOther programming languages are supported as well.\n3. All <, > and & symbols that are not a part of a tag or an HTML entity must be replaced with the corresponding HTML entities (< with &lt;, > with &gt; and & with &amp;)\n4. If the user sends you a message starting with / sign, it means this is a Telegram bot command. For example, all users send /start command as their first message. Try to figure out what these commands mean and reply accodringly\n"
        }
      },
      "id": "3b56587a-77d3-4965-930b-365c6bb065cf",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        352,
        0
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "description": "call the tool when the user ask for news",
        "workflowId": {
          "__rl": true,
          "value": "LL1Txvu70BDDirXT",
          "mode": "list",
          "cachedResultName": "innerTool_rss"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        576,
        224
      ],
      "id": "f0ff1ba5-34e9-48ce-a9b5-884fddac826b",
      "name": "newsTool"
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "0ddc1790-3d80-4f44-83b4-47157acf08f2",
      "name": "OpenAI Chat Model8",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        320,
        224
      ],
      "typeVersion": 1,
      "credentials": {
        "openAiApi": {
          "id": "3rq4oYeCrFOjJZ5D",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "d9f3eac2-5d84-42ff-905f-44c827ea9876",
              "leftValue": "={{ $json.message.chat.id }}",
              "rightValue": 530815619,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        96,
        0
      ],
      "id": "8cf10aec-08c7-4e8f-9dde-3350c7dad5e2",
      "name": "If1"
    }
  ],
  "connections": {
    "Window Buffer Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Telegram": {
      "main": [
        [],
        [
          {
            "node": "Correct errors",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Listen for incoming events": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "newsTool": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model8": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "5bbb34b1-78fa-4bbf-8e06-b6c506f26638",
  "triggerCount": 1,
  "tags": []
}